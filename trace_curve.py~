
import sys, serial, argparse
import numpy as np
from time import sleep
from collections import deque

import matplotlib.pyplot as plt 
import matplotlib.animation as animation

    
# plot class
class AnalogPlot:
    def __init__(self, strPort, maxLen):
        # open serial port
        self.ser = serial.Serial(strPort, 9600)
        self.ay = deque([0.0]*maxLen)
        self.maxLen = maxLen

    # add to buffer
    def addToBuf(self, buf, val):
        if len(buf) < self.maxLen:
            buf.append(val)
        else:
            buf.pop()
            buf.appendleft(val)

    # add data
    def add(self, data):
        # self.addToBuf(self.ax, data[0])
        self.addToBuf(self.ay, data)

    # update plot
    def update(self, frameNum, a1):
        try:
            line = self.ser.readline()
            try:
                data = float(line)
            
            print(data)
            self.add(data)
            a1.set_data(range(self.maxLen), self.ay)
        
	except KeyboardInterrupt:
            print('exiting')
      	
        return a1, 

    # clean up
    def close(self):
        # close serial
        self.ser.flush()
        self.ser.close()    

# main() function
def main():
    strPort = '/dev/ttyACM0'
    # strPort = args.port

    print('reading from serial port %s...' % strPort)

    # plot parameters
    analogPlot = AnalogPlot(strPort, 100)

    print('plotting data...')

    # set up animation
    fig = plt.figure()
    ax = plt.axes(xlim=(0, 100), ylim=(3100, 3300))
    a1, = ax.plot([], [])
    anim = animation.FuncAnimation(fig, analogPlot.update, 
                                   fargs=(a1,), 
                                   interval=10)

    # show plot
    plt.show()
  
    # clean up
    analogPlot.close()

    print('exiting.')

if __name__ == '__main__':
    main()
